30 September 2023
-Generated new project for analyzing simple substitution ciphers

01 October 2023
-Got "Cracking Codes with Python" book to help suss out how to handle cracking substitution cipher decoding
    -Created new branch "ReverseCipher" off of main branch.
        -Created "Exercises" directory for storing exercises from Cracking Codes with Python
            -Created new file "reverseCipher.py"
                -Few lines of code that take input & provide a "mirrored"("derorrim") version of the string.
        -Added reverseCipher function to main.py
        -Added sarcasticCipher function to main.py
            -Takes inputted string & provides a "sarcastic"("sArCaStIc") output of it.
    -Merged ReverseCipher branch into main branch.

02 October 2023
-Generated CaesarCipher branch from main branch
    -Created Exercises > caesarCipher.py
        -Exercise for creating a basic caesar cipher where letters are shifted a defined number for encryption/decryption
    -Added caesarCipher() function to main.py
-Merged caesarCipher branch into main branch

03 October 2023
-Created CaesarHacker branch off of main branch
    -Generated Exercises > caesarHacker.py file
        -Exercise to bruteforce caesar ciphers by iterating through every possible key value
    -Added caesarHacker() to main.py as a function
-merged CaesarHacker branch into main branch

04 October 2023
-Created TranspositionEncrypt branch off of main branch
    -Generated Exercises > transpositionEncrypt.py file
        -Established main() function
        -Established encryptMessage() function
            -Function that encrypts the message via a transposition cipher

05 October 2023
-Worked on transpositionEncrypt.py
    -Fleshed out encryptMessage() function to work through transposition process based on the provided key length
    -Confirmed it working properly
-Added transpositionEncrypt() function to main.py
-Merged TranspositionEncrypt branch into main branch

06 October 2023
-Generated TranspositionDecrypt branch off of main branch
    -Added Exercises > transpositionDecrypt.py
        -Created holder for main() function
        -Put in framing for decryptMessage() function
            -Defined function, variables, & return value.
        -Added contents of main() function to call the decryptMessage() function, print results on screen, & copy contents to the clipboard.
            -Removed main() function's TODO
            -Added context comments to portions of main() function.
        -Added body of the decryptMessage() function.
            -Put in math to instruct the program on how to read in the encrypted message & sort it out based on the provided key length.
            -Added context comments
    -Added transpositionDecrypt() function to main.py
        -Framed function with initialization comments for required variables.
        -Added math for defining the number of columns, rows, & shaded boxes for the decryption function.
        -Provided logic for decrypting provided message.
        -Tested functionality & confirmed that it is working.
-Merged TranspositionDecrypt branch into main branch

07 October 2023
-Generated TranspositionTest branch off of main branch
    -Created Exercises > transpositionTest.py
        -Added main() function & main running stipulation
        -Added testing capability for the transposition cipher.
    -Added transpositionTest() function to main.py
        -Added initial values & initial comments
        -Generated anchor seed for random generation
        -Put in forloop for the test iterations.

08 October 2023
-Added mechanics for creating a random string of characters to test in transpositionTest() function of main.py
    -Created means to convert string to list, shuffle the list, & then recombine the shuffled list into a string
    -Added padding zero if the current test iteration is less than or equal to nine.

09 October 2023
-Added mechanics for encrypting the random strings for the transpositionTest() function
-... for decrypting the random strings for the transpositionTest() function
-Created watcher to see if the decryption produced the same thing as the encrypted message.
-Put final portion of the function to show that the test had passed.
-Merged TranspositionTest branch with main branch.

10 October 2023
-Created TranspositionFileCipher branch off of main branch
    -Added file in Exercises > transpositionFileCipher.py
        -Added main() function
        -Imported dependencies both from common Python libraries & ones that were created via this exercise.
        -Defined the directory path for the files to be worked.
        -Defined variables for handling the input file name & output file name after encryption
        -Added variables for the cryptionKey & "mode" that will allow user to define if they want to encrypt or decrypt a file
        -Added check for valid mode selection with program exit on failed mode selection
    -Added Exercises > Resources directory for storing text files to be encrypted
        -Added txt files to resources for testing transposition file encryption to directory.

11 October 2023
-Added check to see if the output file already exists.  If it does it offers the user the ability to exit out before overwriting the existing file.
-Added check to see if input file exists before attempting to run the cipher on it.  If it does not exist it informs the user & exits.
-Read in input file to the program & stored it as a variable
-Ran prelim tests to assure:
    -Mode check is working
    -Inputfile check is working
    -Outputfile check is working
-Printed current running mode to console.

12 October 2023
-Added execution time measuring section
-Added script calls for ciphering the provided message based on the cryptMode variable(encrypt on 'encrypt', decrypt on 'decrypt')
-Opened text file to write results of crypting of file.
-Added sign off prints to inform user on results & file output name
-Added instructive comments that may have been missed during development
-Tested & confirmed MVP is working
-Added if statements to better streamline the file finding/file name working process
    -Tested & confirmed it working properly
-Merged TranspositionFileCipher branch into main branch

13 October 2023
-Generated fileTranspositionFunction branch off of main branch
    -Branch to add the functionality of the fileTransposition file to the main.py file as a function
-Added base comments to the transpositionFileCipher() function
-Created check to see if the user entered a valid cipher type for the program
-Added filename context based on the selected cipher type
-Put in constructors for input & output file types provided by the user
-Added check to see if the input file exists & exit if it does not
-Added check to see if the output file exists & ask the user to confirm before overwriting the file
-Read contents of input file into memory
-Added print function to inform user/keep them in the loop
-Began ciphering section with a try/except block.
    -Block tries to either encrypt or decrypt the provided content.  If it is met with an exception it reports said exception & exits the program
-Added a little timer cap to the cipher section to see how long it takes to run
-Wrote translated block to output file within a try/except
    -Block tries writing to defined file.  If it is met with an exception it reports said exception & exits the program
-Added try/except for reading in input file
-Added closing print to inform user of success & where they can find their output file
-Tested functionality of function(heh) & confirmed its expected operation
-Moved some of the calling variables for the function to make a more coherent order when calling the function
-Merged fileTranspositionFunction branch into main branch.

14 October 2023
-Generated IsEnglish branch from main branch
    -This branch will be dedicated to creating a file for detecting defined english words within provided bodies of text
-Added file Exercises > Resources > dictionary.txt
    -File with defined english words for comparison
    -Added a few missing words to the dictionary
-Created Exercises > detectEnglish.py
    -Module for this portion of the exercise
-Added user instruction comment to detectEnglish.py on how to use the module
-Defined the letter cases via string library
-Entered function frames for parts of detectEnglish.py
    -Added TODO flags for each of the incomplete functions
-Fleshed out loadDictionary() function
    -Loads the Exercises > Resources > dictionary.txt file into a dictionary as keys with None values
        -The book has us to this because searching dictionaries is faster than searching lists
    -Note: I added a function param for the dictionary.txt file instead of having it hard coded as the book instructs.
    -Removed TODO flag
-Created variable ENGLISH_WORDS that calls the loadDictionary() function
-Fleshed out getEnglishCount() function
    -Takes the contents of the provided message, removes characters not defined earlier, & splits it on spaces. It then compares the contents of the results to the word dictionary from ENGLISH_WORDS to see if there are any matches.  If there are it ticks up a counter.  Once it's done it returns a float of counter value divided by the total length of the original message to the calling function
    -Note: The book called for an if statement that the interpreter provided a simplification for.  I agreed with the interpreter & put in the simplified solution but notated the book's version in a comment.
-Removed TODO flag from getEnglishCount() function
-Fleshed out removeNonLetters() function
    -facilitates the removal of characters not defined by LETTERS_AND_SPACES variable from a provided message. Returns results as a string from a joined list of resulting letters
-Removed TODO flag from removeNonLetters() function
-Fleshed out isEnglish() function
    -Function for interrogating a provided message to determine if there are words present in it that are from the word dictionary loaded into the "ENGLISH_WORDS" variable.
    -Note: Book called for a big preamble explaining what certain parts of the code does.  I just added that to the initialization comment for the function as the param definitions instead.
-Removed TODO flag from isEnglish() function
-Tested functionality of detectEnglish.py()
    -Passed successfully on following inputs with default thresholds:
        -"Is this an english sentence?" > True
        -"qSc Jubz5 cvV nv person gN8gpgs" > False
-Merged IsEnglish branch into main branch

15 October 2023
-Side channelled to headrun on the concept of classes
-Generated DetectEnglishFunction branch from main branch
-Added empty function frames(with initialization comments) for loadDictionary(), getEnglishCount(), removeNonLetters(), & isEnglish() functions
-Worked with loadDictionary()
    -Read provided file into program
    -for each newlined object in file, create a dict entry with the object as the key & None as the value
        -This is because the book states dicts are faster to search than lists.  Personally I think this is silly from a memory management perspective but if we were so worried about that we should use C instead of Python
    -Return the dict to the caller
    -Removed TODO flag
-Worked with getEnglishCount()
    -Convert message to all uppercase
    -Remove all inappropriate characters from the message
    -Check to see if any characters left, if not return 0.0 to caller
    -Go through all the remaining objects & compare them to the objects from the word dictionary
        -If any matches, then increase the match count by 1
    -Return the ratio of matches to total possible objects as a float to caller
    -Removed TODO flag

16 October 2023
-Worked with removeNonLetters()
    -checked symbols from provided message against appropriate characters.
    -If the symbol is in the appropriate characters then append it to a list
    -Convert appended list into a joined string
    -Return joined string to calling function
    -Removed TODO flag
-Worked with isEnglish()
    -Loaded dictionary with loadDictionary()
    -Checked the message for words with getEnglishCount() & compared the result to the wordCount minimum
    -Got the length of the allowed characters by running removeNonLetters()
    -Calculated the ratio of the message after removing inappropriate characters to the actual length of the original message
    -Compared this ratio to the allowed minimum percentage of allowed characters
    -Returned the results of comparisons as bools
    -Removed TODO flag
-Ran tests on the isEnglish() function group.
    -Tested "This is a sentence." (True)
    -Tested "asdfasd yuwiefasd asdfahha" (False)
    -Tested "This asdfasd not asdthte sentence" (True on grounds of threshold variables)
    -Tested "..... Hat !!!!! Ball ????? ~~~~~~~~~~~~~~~~~~~~ ******** (((((((((( 9098765432" (True)
        -This should have returned False.  After some digging I realized I hadn't actually called the "removeNonLetters()" function when making this comparison.  This means that this variable would have always come back True
        -Corrected this, confirmed with retest, results were False
    Tested "" (ZeroDivisionError)
        -Added try/Except block for this to catch ZeroDivisionErrors.  Added message & showed user the length of message provided before exiting the program.
        -Tested result.  Task crashed gracefully & as expected.
-Merged DetectEnglishFunction branch into main branch.

17 October 2023
-Generated TranspositionHacker branch off of main branch
-Created Exercises > transpositionHacker.py file
    -File will be used for exploring the book's code on how to use the detectEnglish.py code to rattle through a bunch of different transposition cipher keys
-Added header comments
-Added import statements
-Generated framing for main() & hackTransposition() functions
-Worked with hackTransposition() function
    -Note: The book wanted me to add key prompts here on how to stop the code early by printing common CTRL+(Whatever) prompts but that seemed to go against the MVP of this project.  Did not include it here.
    -Began forloop to iterate through all keys up to the length of the message
    -Submitted key to the transpositionDecrypt.decryptMessage() function
    -Passed result of above to detectEnglish.isEnglish() function
    -Displayed possible decryption to user asking for confirmation on message
        -If it is a good one, then it will stop, if not it will continue iterating through keys
    -Removed TODO flag
-Worked with main() function
    -Defined the variable myMessage to store the message to be decrypted
    -passed message to the hackTransposition() function
    -Checked results from pass
        -If None then it prints that the decrypt failed.  If it returns a result then it prints the result & copies that to the clipboard.
-Tested program functionality
    -Copied sample message from website & pasted it into myMessage
    -Result: "key 6: Augusta Ada King-Noel, Countess of Lovelace (10 December 1815 - 27 November 1852) was an English mat"
    -Tried again, not stopping it when it came across key 6
    -Result: "Trying key: 400...
                Trying key: 410...
                Failed to hack message"
-Merged TranspositionHacker branch into main branch
-Generated TranspositionHackerFunction branch from main branch
-Working with main.py()
    -Added frames & initialization comments for the hackTranspositionEngine() and hackTranspositionController() functions
-Made correction to transpositionHacker.py
    -Book called for a return None call at the end of hackTransposition() function.  Inserted that
-Worked with hackTranspositionEngine() function in main.py
    -Began forloop to iterate through all keys up to the length of the message
    -Submitted key to the transpositionDecrypt.decryptMessage() function
    -Passed result of above to detectEnglish.isEnglish() function
    -Displayed possible decryption to user asking for confirmation on message
        -If it is a good one, then it will stop, if not it will continue iterating through keys
    -Removed TODO flag
-Worked with hackTranspositionController() function in main.py
    -Defined the variable myMessage to store the message to be decrypted
    -passed message to the hackTranspositionEngine() function
    -Checked results from pass
        -If None then it prints that the decrypt failed.  If it returns a result then it prints the result & copies that to the clipboard.
    -Removed TODO flag
-Tested new function functionality
    -Copied sample message from website & pasted it into myMessage
    -Result: "key 6: Augusta Ada King-Noel, Countess of Lovelace (10 December 1815 - 27 November 1852) was an English mat"
    -Tried again, not stopping it when it came across key 6
    -Result: "Trying key: 400...
                Trying key: 410...
                Failed to hack message"
-Merged TranspositionHackerFunction branch into main branch

18 October 2023
-Generated CryptoMath branch off of main branch
-Read about modular arithmetic & the modulo operator
-Created Exercises > cryptoMath.py
-Experimented with a greatest common denominator function using Euclid's Algorithm for them
    -Book called for using a function containing a while loop.  Based on the function itself I feel like there's potential for a recursive function in there, but I cannot sort it out.
-Created functions gcd() & findModInverse() & their initial comments within cryptoMath.py
    -gcd() function will find the greatest common denominator of two provided numbers
    -findModInverse() function will find the modulo value of two provided numbers that calculate out to one
        -i.e. "findModInverse(a,c)" will find b where "(a * b) % c == 1" & return either the value b or None
-Worked with gcd() function
    -Loop while a isn't zero
    -calculate values so that a will equal the result of b % a & b to the new value of a
    -Once a is zero, return b to caller
    -Removed TODO flag
-Worked with findModInverse() function
    -Takes in values a & m
    -Checks to see if a & m are relatively prime.  If not then it returns None
    -Sets initial variable values based on the provided values of a & m
        -This is a lot of math; basically it does a bulky version of the Euclid function for finding GCD called "Extended Euclid's function"
    -Calculates the value i so that (a * i) % m == 1
    -returns a modulo calculation of a portion of the bulky math to m (u1 % m)
    -Removed TODO flag
-Tested functions with provided data points
    -gcd(24, 32) == 8 (Pass)
    -gcd(37, 41) == 1 (Pass)
    -findModInverse(7, 26) == 15 (Pass)
    -findModInverse(8953851, 26) == 17 (Pass)
    -findModInverse(37, 41) == 10 (Pass)
-Added better descriptor for findModInverse() function
-Merged CryptoMath branch into main branch

19 October 2023
-Generated CryptoMathFunctions branch off of main branch
-Added function frame & initial comments for gcd() & findModInverse() functions
-Working with gcd():
    -Created while loop for a not being zero
    -While a isn't zero set values of a to b % a & b to a
    -Return b once a is zero
-Working with findModInverse():
    -Check if provided values are relatively prime
        -If they aren't then return None
    -Use Euclid's extended algorithm to calculate the modulo inverse for the provided values
    -Return the modulo of u1 with the provided m value
    -Removed TODO flag
-Merged CryptoMathFunctions branch into main branch

20 October 2023
-Generated AffineCipher branch from main branch
-Created Exercises > affineCipher.py file
-Added required imports & string
-Set value SYMBOL to match upper/lowercase letters, numbers, & special symbols " ?!."
-Added framework of all functions
-Working with getRandomKey() function:
    -Filled out initial comments
    -Started while loop & generated two random integers up to the length of the SYMBOLS variable
    -Checked to see if the first key("keyA") is relatively prime with the length of the SYMBOLS variable
        -If so then returns keyA * len(SYMBOLS) + keyB
    -Removed TODO flag
-Working with main() function:
    -Created myMessage, myKey, & myMode variables for storing various controls
    -Ran if else loop based on the settings of myMode
    -Displayed translated version of myMessage for user & copied it to the clipboard
    -Removed TODO flag

21 October 2023
-Working with getKeyParts() function:
    -Performed floor division on key & length of SYMBOLS value
    -Got the modulo of the key & length of SYMBOLS value
    -Returned the two values to the calling function as a tuple
    -Removed TODO Flag
-Working with checkKeys() function:
    -With if blocks checked for:
        -If mode is encrypt:
            -If keyA equals 1 or keyB is zero
        -If keyA < 0, keyB < 0, or that keyB > len(SYMBOLS)
        -If keyA and the length of SYMBOLS are not relatively prime
    -If any of the above were true, exit out of the program with a console message for the user
    -Removed TODO flag
-Working with encryptMessage() function:
    -Separated the provided keys with getKeyParts() function
    -Checked the validity of the keys with checkKeys() function
    -Iterated through each symbol in the message
        -If the symbol was found in SYMBOLS variable, then run the Affine Cipher (SYMBOLS[(symbolIndex * keyA + keyB) % len(SYMBOLS)]) on it in relation to its location within the SYMBOLS variable
        -If the symbol is not found in the SYMBOLS variable, then apply it unedited to the message
   -Return the context of cipherText to calling function
   -Removed TODO flag
-Working with decryptMessage() function:
    -Separated the provided keys with getKeyParts() function
    -Checked the validity of the keys with checkKeys() function
    -Generated the modulo inverse of keyA using cryptoMath.getModInverse()
    -Iterated through each symbol in the message
        -If the symbol was in SYMBOLS then get the location of symbol in SYMBOLS
            -Subtract the value of keyB from the symbol's location, multiply that by the modInverse of key A, then find the modulo of that with the length of the SYMBOLS variable.
                -Append this to plainText
        -If not then append the symbol unaltered to plainText
    -Return plainText
    -Removed TODO flag
-Began testing of affineCipher.py
    -First test: Encrypt the following with key 2894:
        """"A computer would deserve to be called intelligent if it could deceive a human into believing that it was human."-Alan Turing"""
        -Result(PASS): "5QG9ol3La6QI93!xQxaia6faQL9QdaQG1!!axQARLa!!AuaRLQADQALQG93!xQxaGaAfaQ1QX3o1RQARL9Qda!AafARuQLX1LQALQI1iQX3o1RN"-5!1RQP36ARu
    -Second test: Decrypt the result of previous with key 2894:
        -""""5QG9ol3La6QI93!xQxaia6faQL9QdaQG1!!axQARLa!!AuaRLQADQALQG93!xQxaGaAfaQ1QX3o1RQARL9Qda!AafARuQLX1LQALQI1iQX3o1RN"-5!1RQP36ARu"""
        -Result(PASS): ""A computer would deserve to be called intelligent if it could deceive a human into believing that it was human."-Alan Turing" (PASS)
    -Third test: Force a non-relatively prime error with key value
        -Key value: 5; mode: encrypt; message: "This is a test message."
        -Result(PASS): "Key A (0) & the symbol set size (66) are not relatively prime.  Choose a different key."
-Merged AffineCipher branch with main branch

22 October 2023
-Generated AffineCipherFunction branch from main branch
-Working with main.py:
    -Added following functions:
        -affineCipher(), getAffineKeyParts(), checkAffineKeys(), encryptAffineMessage(), decryptAffineMessage(), getRandomAffineKey()

23 October 2023
-Added initial comments to recently added functions
-Working with getRandomAffineKey() function:
    -Created while loop to keep function iterating during process
    -Generated random integers for keyA & keyB based on the count of available characters for the cipher
    -Compared keyA to the count of available characters using gcd():
        -If the result is 1(The two values are relatively prime) then return keyA * lenSymbols + keyB
        -Else throw away the random keys & start over
    -Removed TODO flag
-Working with getAffineKeyParts() function:
    -Calculated the floor division of provided key & count of available characters for the cipher
    -Calculated the modulo of the provided key & count of available characters for the cipher
    -Returned the two calculated values as a tuple
    -Removed TODO flag
-Working with checkAffineKeys() function:
    -Checked to see in encrypt mode:
        -If Key A is 1 or key B is zero
    -Checked to see if Key A or Key B are less than zero or Key B is greater than the symbol set length - 1
    -Checked to see if Key A and the symbol set length are not relatively prime
    -If any of above are true, then exit the program with a message saying why
    -Removed TODO flag

24 October 2023
-Working with encryptAffineMessage() function:
    -Gathered keys from supplied key with getAffineKeyParts() function
    -Checked the validity of the separated keys with checkAffineKeys() function
    -Looped through the characters in the provided message
        -if the character is in the SYMBOLS set, then copy its location & perform an affineCipher calculation((characterLocation * keyA + keyB) % len(SYMBOLS))
            -Append the newly calculated symbol to the return value
        -If not, then append the character directly to the return value
    -Return the return value to caller
    -Removed TODO flag
-Working with affineCipher() function
    -Called the encryptAffineMessage if mode set to encrypt
    -Called the decryptAffineMessage if mode set to decrypt
    -Exit program if mode not set to encrypt or decrypt
    -Copy content of translated message to clipboard
    -Print results
    -Removed TODO flag
-Started on testing of the affineCipher function
    -Test1(Does it encrypt?):
        -myMessage = """"A computer would deserve to be called intelligent if it could deceive a human into believing that it was human." -Alan Turing"""
        -myKey = 2894
        -myMode = "Encrypt"
        -Result: """"5QG9ol3La6QI93!xQxaia6faQL9QdaQG1!!axQARLa!!AuaRLQADQALQG93!xQxaGaAfaQ1QX3o1RQARL9Qda!AafARuQLX1LQALQI1iQX3o1RN"Q-5!1RQP36ARu"""
        -Desired Pass/Fail: PASS
        -Pass/Fail: PASS

    -Test2(Does it decrypt?:
        -myMessage = """"5QG9ol3La6QI93!xQxaia6faQL9QdaQG1!!axQARLa!!AuaRLQADQALQG93!xQxaGaAfaQ1QX3o1RQARL9Qda!AafARuQLX1LQALQI1iQX3o1RN"Q-5!1RQP36ARu"""
        -myKey = 2894
        -myMode = "Decrypt"
        -Result: """"A computer would deserve to be called intelligent if it could deceive a human into believing that it was human." -Alan Turing"""
        -Desired Pass/Fail: PASS
        -Pass/Fail: PASS

    -Test3(Does it catch bad keys?):
    -myMessage = """"A computer would deserve to be called intelligent if it could deceive a human into believing that it was human." -Alan Turing"""
    -myKey = 15
    -myMode = "Encrypt"
    -Result: "Key A (0) & the symbol set size (66) are not relatively prime.  Choose a different key.
            Key: 15
            Encrypted text:
            "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP"P-PPPPPPPPPPP
            Full encrypted text copied to clipboard"
    -Desired Pass/Fail: FAIL
    -Pass/Fail: PASS
    -Note: This was supposed to exit the program before attempting the ciphering.  Realized there was a missing sys.exit() in the checkAffineKeys() function.  Corrected this problem.

    -Test4(Does it catch bad modes?)
    -myMessage = """"A computer would deserve to be called intelligent if it could deceive a human into believing that it was human." -Alan Turing"""
    -myKey = 15
    -myMode = "BadMode"
    -Result: ""Badmode" is not a valid mode.  Please retry with either "encrypt" or "decrypt".
                Quitting..."
    -Desired Pass/Fail: FAIL
    -Pass/Fail: FAIL
-Merged AffineCipherFunction branch with main branch

25 October 2023
-Generated AffineHacker branch off of main branch
-Created Exercises > affineHacker.py
    -Added main() function frame
    -Added hackAffine() function frame
        -Added initial comments for function
    -Imported required packages
    -Working with hackAffine() function:
        -Iterated through all keys in the range up to the square of the count of available characters
        -Checked for key validity on each key with cryptoMath & checkKey
        -Created decrypted text with the provided key
        -Checked decrypted text with detectEnglish function
        -Checked with user to see if the message is english & if not keep going
        -Returned decryptedText
        -Removed TODO flag
    -Working with main() function:
        -Populated myMessage
        -Added SILENT_MODE flag
        -Passed message to hackAffine
            -If successful copies message to clipboard
            -If not it prints that the hack was unsuccessful
        -Removed TODO flag
-Pushed AffineHacker branch to main branch

26 October 2023
-Created AffineHackerFunction branch off of main branch
-Added frame of functions affineHacker() & hackAffine() as well as their initial comments.
-Working with hackAffine() function:
    -Iterated through all keys in the range up to the square of the count of available characters
    -Checked for key validity on each key with cryptoMath & checkKey
    -Created decrypted text with the provided key
    -Checked decrypted text with detectEnglish function
    -Checked with user to see if the message is english & if not keep going
    -Returned decryptedText
    -Removed TODO flag
-Working with affineHacker() function:
    -Populated myMessage
       -Added SILENT_MODE flag
       -Passed message to hackAffine
           -If successful copies message to clipboard
           -If not it prints that the hack was unsuccessful
       -Removed TODO flag
-Tested hackAffine() function
-Merged AffineHackerFunction branch with main branch

27 October 2023
-Created SimpleSubCipher branch from main branch
    -Created Exercises > simpleSubCipher.py
        -Added imports for the program
        -Created initial functions with their initialization comments