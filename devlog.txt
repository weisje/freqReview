30 September 2023
-Generated new project for analyzing simple substitution ciphers

01 October 2023
-Got "Cracking Codes with Python" book to help suss out how to handle cracking substitution cipher decoding
    -Created new branch "ReverseCipher" off of main branch.
        -Created "Exercises" directory for storing exercises from Cracking Codes with Python
            -Created new file "reverseCipher.py"
                -Few lines of code that take input & provide a "mirrored"("derorrim") version of the string.
        -Added reverseCipher function to main.py
        -Added sarcasticCipher function to main.py
            -Takes inputted string & provides a "sarcastic"("sArCaStIc") output of it.
    -Merged ReverseCipher branch into main branch.

02 October 2023
-Generated CaesarCipher branch from main branch
    -Created Exercises > caesarCipher.py
        -Exercise for creating a basic caesar cipher where letters are shifted a defined number for encryption/decryption
    -Added caesarCipher() function to main.py
-Merged caesarCipher branch into main branch

03 October 2023
-Created CaesarHacker branch off of main branch
    -Generated Exercises > caesarHacker.py file
        -Exercise to bruteforce caesar ciphers by iterating through every possible key value
    -Added caesarHacker() to main.py as a function
-merged CaesarHacker branch into main branch

04 October 2023
-Created TranspositionEncrypt branch off of main branch
    -Generated Exercises > transpositionEncrypt.py file
        -Established main() function
        -Established encryptMessage() function
            -Function that encrypts the message via a transposition cipher

05 October 2023
-Worked on transpositionEncrypt.py
    -Fleshed out encryptMessage() function to work through transposition process based on the provided key length
    -Confirmed it working properly
-Added transpositionEncrypt() function to main.py
-Merged TranspositionEncrypt branch into main branch

06 October 2023
-Generated TranspositionDecrypt branch off of main branch
    -Added Exercises > transpositionDecrypt.py
        -Created holder for main() function
        -Put in framing for decryptMessage() function
            -Defined function, variables, & return value.
        -Added contents of main() function to call the decryptMessage() function, print results on screen, & copy contents to the clipboard.
            -Removed main() function's TODO
            -Added context comments to portions of main() function.
        -Added body of the decryptMessage() function.
            -Put in math to instruct the program on how to read in the encrypted message & sort it out based on the provided key length.
            -Added context comments
    -Added transpositionDecrypt() function to main.py
        -Framed function with initialization comments for required variables.
        -Added math for defining the number of columns, rows, & shaded boxes for the decryption function.
        -Provided logic for decrypting provided message.
        -Tested functionality & confirmed that it is working.
-Merged TranspositionDecrypt branch into main branch

07 October 2023
-Generated TranspositionTest branch off of main branch
    -Created Exercises > transpositionTest.py
        -Added main() function & main running stipulation
        -Added testing capability for the transposition cipher.
    -Added transpositionTest() function to main.py
        -Added initial values & initial comments
        -Generated anchor seed for random generation
        -Put in forloop for the test iterations.

08 October 2023
-Added mechanics for creating a random string of characters to test in transpositionTest() function of main.py
    -Created means to convert string to list, shuffle the list, & then recombine the shuffled list into a string
    -Added padding zero if the current test iteration is less than or equal to nine.

09 October 2023
-Added mechanics for encrypting the random strings for the transpositionTest() function
-... for decrypting the random strings for the transpositionTest() function
-Created watcher to see if the decryption produced the same thing as the encrypted message.
-Put final portion of the function to show that the test had passed.
-Merged TranspositionTest branch with main branch.

10 October 2023
-Created TranspositionFileCipher branch off of main branch
    -Added file in Exercises > transpositionFileCipher.py
        -Added main() function
        -Imported dependencies both from common Python libraries & ones that were created via this exercise.
        -Defined the directory path for the files to be worked.
        -Defined variables for handling the input file name & output file name after encryption
        -Added variables for the cryptionKey & "mode" that will allow user to define if they want to encrypt or decrypt a file
        -Added check for valid mode selection with program exit on failed mode selection
    -Added Exercises > Resources directory for storing text files to be encrypted
        -Added txt files to resources for testing transposition file encryption to directory.

11 October 2023
-Added check to see if the output file already exists.  If it does it offers the user the ability to exit out before overwriting the existing file.
-Added check to see if input file exists before attempting to run the cipher on it.  If it does not exist it informs the user & exits.
-Read in input file to the program & stored it as a variable
-Ran prelim tests to assure:
    -Mode check is working
    -Inputfile check is working
    -Outputfile check is working
-Printed current running mode to console.

12 October 2023
-Added execution time measuring section
-Added script calls for ciphering the provided message based on the cryptMode variable(encrypt on 'encrypt', decrypt on 'decrypt')
-Opened text file to write results of crypting of file.
-Added sign off prints to inform user on results & file output name
-Added instructive comments that may have been missed during development
-Tested & confirmed MVP is working
-Added if statements to better streamline the file finding/file name working process
    -Tested & confirmed it working properly
-Merged TranspositionFileCipher branch into main branch

13 October 2023
-Generated fileTranspositionFunction branch off of main branch
    -Branch to add the functionality of the fileTransposition file to the main.py file as a function
-Added base comments to the transpositionFileCipher() function
-Created check to see if the user entered a valid cipher type for the program
-Added filename context based on the selected cipher type
-Put in constructors for input & output file types provided by the user
-Added check to see if the input file exists & exit if it does not
-Added check to see if the output file exists & ask the user to confirm before overwriting the file
-Read contents of input file into memory
-Added print function to inform user/keep them in the loop
-Began ciphering section with a try/except block.
    -Block tries to either encrypt or decrypt the provided content.  If it is met with an exception it reports said exception & exits the program
-Added a little timer cap to the cipher section to see how long it takes to run
-Wrote translated block to output file within a try/except
    -Block tries writing to defined file.  If it is met with an exception it reports said exception & exits the program
-Added try/except for reading in input file
-Added closing print to inform user of success & where they can find their output file
-Tested functionality of function(heh) & confirmed its expected operation
-Moved some of the calling variables for the function to make a more coherent order when calling the function
-Merged fileTranspositionFunction branch into main branch.

14 October 2023
-Generated IsEnglish branch from main branch
    -This branch will be dedicated to creating a file for detecting defined english words within provided bodies of text
-Added file Exercises > Resources > dictionary.txt
    -File with defined english words for comparison
    -Added a few missing words to the dictionary
-Created Exercises > detectEnglish.py
    -Module for this portion of the exercise
-Added user instruction comment to detectEnglish.py on how to use the module
-Defined the letter cases via string library
-Entered function frames for parts of detectEnglish.py
    -Added TODO flags for each of the incomplete functions
-Fleshed out loadDictionary() function
    -Loads the Exercises > Resources > dictionary.txt file into a dictionary as keys with None values
        -The book has us to this because searching dictionaries is faster than searching lists
    -Note: I added a function param for the dictionary.txt file instead of having it hard coded as the book instructs.
    -Removed TODO flag
-Created variable ENGLISH_WORDS that calls the loadDictionary() function
-Fleshed out getEnglishCount() function
    -Takes the contents of the provided message, removes characters not defined earlier, & splits it on spaces. It then compares the contents of the results to the word dictionary from ENGLISH_WORDS to see if there are any matches.  If there are it ticks up a counter.  Once it's done it returns a float of counter value divided by the total length of the original message to the calling function
    -Note: The book called for an if statement that the interpreter provided a simplification for.  I agreed with the interpreter & put in the simplified solution but notated the book's version in a comment.
-Removed TODO flag from getEnglishCount() function
-Fleshed out removeNonLetters() function
    -facilitates the removal of characters not defined by LETTERS_AND_SPACES variable from a provided message. Returns results as a string from a joined list of resulting letters
-Removed TODO flag from removeNonLetters() function
-Fleshed out isEnglish() function
    -Function for interrogating a provided message to determine if there are words present in it that are from the word dictionary loaded into the "ENGLISH_WORDS" variable.
    -Note: Book called for a big preamble explaining what certain parts of the code does.  I just added that to the initialization comment for the function as the param definitions instead.
-Removed TODO flag from isEnglish() function
-Tested functionality of detectEnglish.py()
    -Passed successfully on following inputs with default thresholds:
        -"Is this an english sentence?" > True
        -"qSc Jubz5 cvV nv person gN8gpgs" > False
-Merged IsEnglish branch into main branch

15 October 2023
-Side channelled to headrun on the concept of classes
-Generated DetectEnglishFunction branch from main branch
-Added empty function frames(with initialization comments) for loadDictionary(), getEnglishCount(), removeNonLetters(), & isEnglish() functions
-Worked with loadDictionary()
    -Read provided file into program
    -for each newlined object in file, create a dict entry with the object as the key & None as the value
        -This is because the book states dicts are faster to search than lists.  Personally I think this is silly from a memory management perspective but if we were so worried about that we should use C instead of Python
    -Return the dict to the caller
    -Removed TODO flag
-Worked with getEnglishCount()
    -Convert message to all uppercase
    -Remove all inappropriate characters from the message
    -Check to see if any characters left, if not return 0.0 to caller
    -Go through all the remaining objects & compare them to the objects from the word dictionary
        -If any matches, then increase the match count by 1
    -Return the ratio of matches to total possible objects as a float to caller
    -Removed TODO flag

16 October 2023
-Worked with removeNonLetters()
    -checked symbols from provided message against appropriate characters.
    -If the symbol is in the appropriate characters then append it to a list
    -Convert appended list into a joined string
    -Return joined string to calling function
    -Removed TODO flag